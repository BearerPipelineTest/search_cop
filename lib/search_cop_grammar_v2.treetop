
grammar SearchCopGrammarV2
  rule complex_expression
    space? (boolean_expression / expression) space? <::SearchCopGrammar::ComplexExpression>
  end

  rule boolean_expression
    and_expression
  end

  rule and_expression
    or_expression (space? ('AND' / 'and') space? / space !('OR' / 'or')) complex_expression <::SearchCopGrammar::AndExpression> / or_expression
  end

  rule or_expression
    expression space? ('OR' / 'or') space? (or_expression / expression) <::SearchCopGrammar::OrExpression> / expression
  end

  rule expression
    parentheses_expression / not_expression / comparative_expression / anywhere_expression
  end

  rule parentheses_expression
    '(' complex_expression ')' <::SearchCopGrammar::ParenthesesExpression>
  end

  rule not_expression
    ('NOT' space / 'not' space / '-') (comparative_expression / anywhere_expression) <::SearchCopGrammar::NotExpression>
  end

  rule comparative_expression
    simple_column space? comparison_operator space? value <::SearchCopGrammar::ComparativeExpression>
  end

  rule comparison_operator
    ':' space? '=' <::SearchCopGrammar::EqualOperator> / ':' space? '!=' <::SearchCopGrammar::UnequalOperator> / ':' space? '>=' <::SearchCopGrammar::GreaterEqualOperator> / ':' space? '>' <::SearchCopGrammar::GreaterOperator> / ':' space? '<=' <::SearchCopGrammar::LessEqualOperator> / ':' space? '<' <::SearchCopGrammar::LessOperator> / ':' <::SearchCopGrammar::IncludesOperator>
  end

  rule anywhere_expression
    "'" [^\']* "'" <::SearchCopGrammar::SingleQuotedAnywhereExpression> / '"' [^\"]* '"' <::SearchCopGrammar::DoubleQuotedAnywhereExpression> / [^\s()]+ <::SearchCopGrammar::AnywhereExpression>
  end

  rule simple_column
    [a-zA-Z0-9_.]+ <::SearchCopGrammar::Column>
  end

  rule value
    "'" [^\']* "'" <::SearchCopGrammar::SingleQuotedValue> / '"' [^\"]* '"' <::SearchCopGrammar::DoubleQuotedValue> / [^\s()]+ <::SearchCopGrammar::Value>
  end

  rule space
    [\s]+
  end
end

